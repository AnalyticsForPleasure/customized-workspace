print ".zsh_functions was invoked"

function rotate_image(){
  convert $1 -rotate $2 rotated_$2_$1
  echo "Output image: rotated_$2_$1"
}

function get_info() {
  identify -format "Image size:%w x %h \nImage DPI: %x x %y\n" $1
}

function get_info_all(){
  for IMAGE in ./*.png
  do
    identify -format "Image size:%w x %h \nImage DPI: %x x %y\n" ${IMAGE}
  done
}

function source_me() {
   echo $fg_bold[yellow]"Sourcing ~\.zshrc"

   # Sourcing all panes in all windows
   tmux_send_keys_all
}

function count_lines() {
  num=$(ll | wc -l)
  echo $fg_bold[green] "Number of lines: $num"
}


# For making sure two files' content is the same
function are_equal() {

	# $1 is the application name
	# $2 is the filename

	if cmp --silent "$1" "$2" ; then
   		echo $fg_bold[green] "File are the same"
	else
   		echo $fg_bold[red] "File are different"
	fi
}


function strace-and-grep(){

  # since strace prints its traces on standard error, not on standard output
  # if [[ $1=="adb" ]]; then
  #   echo "Grepping: $3"

  # fi

  echo "Binary file: $1"
  echo "Grepping: $2"
}

function documentation-list(){
	echo $fg_bold[cyan]"All documentations listed below:"$fg_bold[white]
	echo ""
	ls -1 ${DOC_MD_PATH}
	echo ""
}

function documentation-edit(){
	if [ $# -eq 0 ]; then
		echo $fg_bold[red] "add argument!!"
		exit 1
	fi

	# search for file in directory if found the execute then edit it.

	local FILENAME=$1.md
	/usr/bin/subl ${DOC_MD_PATH}/"${FILENAME}"
}


function locate-here(){
  # Locate files under the current directory
  locate $1 | grep $PWD
}

function cat-hebrew(){
  # View hebrew file
  cat $1 | bidiv
}

function helper(){
    if [ $# -eq 0 ]; then
      echo $fg_bold[red] "add argument!!"
      subl ~/.oh-my-zsh/custom/plugins/zsh-completions/src/_helper
      # exit 1
    fi

    python `which doc-helper.py` $1
    tldr find $1
}

function ask_yes_or_no() {
    read "answer?$1 ([y]es or [N]o): "
    case $(echo $answer | tr '[A-Z]' '[a-z]') in
        y|yes) echo "yes" ;;
        *)     echo "no" ;;
    esac
}


function tmux_send_keys_all() {
  for _window in $(tmux list-windows -F '#I'); do
    for _pane in $(tmux list-panes -t ${_window} -F '#P'); do
      tmux send-keys -t ${_window}.${_pane} "source ~/.zshrc" Enter
    done
  done
}


function fork_without_block() {
  # $1 is the application name
  # $2 is the filename
  nohup $1 $2  > /dev/null &
}


function fix_name() {
  # $1 is the filename
  new_file_name=$(echo $1 | tr '\ ,"' '_')
  new_file_name=$(echo $new_file_name | tr --delete "'")
  mv $1 $new_file_name

  echo $fg_bold[yellow]"File was renamed to: "$new_file_name
}

function fix_name_all_files_in_directory(){
  for file in *; do mv "$file" `echo $file | tr ' \(\)-' '_'` ; done
}

function firefox_me(){
  /usr/bin/firefox $1 --ProfileManager &
}

function rm_pipenv_project(){
  project_virtual_env=`pipenv --venv` 
  [ -z "$project_virtual_env" ] && echo $fg_bold[red] "Gil: Virtual env not found" && exit 1
  echo $fg_bold[yellow] "Removing the virtual env: "$project_virtual_env
  rm -rf $project_virtual_env

# The function is invoked with treef
function tree_recursive_show_files_in_each_directory(){
  find . -type d -print0 | while read -d '' -r dir; do
    files=("$dir"/*)
    printf "%5d files in directory %s\n" "${#files[@]}" "$dir"
  done
}

  project_path=`pipenv --where`
  [ -z "$project_path" ] && echo $fg_bold[red] "Gil: project directory not found" && exit 1
  
  # Attention: fails below
  cd $project_path/..

  echo $fg_bold[yellow] "Removing the project folder: "$project_path
  rm -rf $project_path
}

#
# TODO function description
# @param  TODO The first parameter
# @return
#function_impresive_display() {
#  feh -l | awk '{ print $3" "$4" "$8 }'
#
#}


# function my-make(){
#   if [ $# -eq 0 ]; then
#     /usr/bin/make --just-print
#     echo $fg_bold[red] "\n Attention: just ran dry-run (Printed the commands that would be executed)"
#     echo $fg_bold[white]
#     if [[ "no" == $(ask_yes_or_no " Would you like now to run make, now?") ]]
#     then
#       echo "Skipped."
#       exit 0
#     fi
#     /usr/bin/make
#   else
#     /usr/bin/make "$@"
#   fi
# }
